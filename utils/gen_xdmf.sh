#!/bin/bash
#
# This script generates a XDMF file for visualizing a time series 3D fields
# (in the HDF5 format) written by PowerLLEL.
#
# Usage:
# 1) Modify parameters below.
# 2) Execute this script to generate a XDMF file.
# 3) Visualize the fields with the resultant XDMF file in a visualization
#    software, e.g., Paraview and VisIt.
#
# Note:
# 1) The mesh file must be located in the same directory as the field files.
# 2) It assumes that the filename of the field files has the format:
#    'XXX_YYYYYYYY_Z.h5'
#    where 'XXX' is the filename prefix (e.g., 'inst_'), 
#          'YYYYYYYY' is the eight-digit time step (e.g., '00001000'),
#          'Z' is the name of the field (e.g., 'u', 'v', 'w' or 'p').
# 3) The resultant XDMF file will be generated in the same directory as the
#    field files.
#

##########################################################################
##                                                                      ##
## Parameters you can modify:                                           ##
## fp         - Floating point precision of data, 4 or 8                ##
## fieldname  - Names of the fields                                     ##
## nx,ny,nz   - Dimensions of the 3D field                              ##
## tstart     - Time step start                                         ##
## tend       - Time step end                                           ##
## tstride    - Time step stride                                        ##
## data_dir   - The directory where the field files locate              ##
## file_mesh  - Filename of the file containing required mesh data,     ##
##              i.e., array xc, yc and zc. The default is NULL, and the ##
##              mesh data is assumed to be contained in the field files.##
## file_field - Filename prefix of the field files, e.g., 'inst_'.      ##
## file_xdmf  - Filename of the resultant *.xdmf file generated by this ##
##              script.                                                 ##
##                                                                      ##
##########################################################################

fp=8
fieldname=('u' 'v' 'w' 'p')
nx=128
ny=128
nz=128
tstart=100
tend=500
tstride=100
tcount=$(((${tend}-${tstart})/${tstride}+1))
data_dir='.'
file_mesh=''
file_field='inst_'
file_xdmf='visu.xdmf'

##########################################################################
##                                                                      ##
## You shouldn't have to modify anything below, unless you know what    ##
## you're doing.                                                        ##
##                                                                      ##
##########################################################################

if [ ! -d ${data_dir} ];then
    echo "ERROR: "${data_dir}" doesn't exist!"
    exit 1
else
    file_xdmf=${data_dir}'/'${file_xdmf}
    if [ -f ${file_xdmf} ];then
        echo 'WARNING: '${file_xdmf}' already exists and it will be replaced!'
        rm -rf ${file_xdmf}
    else
        touch ${file_xdmf}
    fi
fi

ntab=0

function put(){
    echo '<'$*'>' >> ${file_xdmf}
}

function out_tabs(){
    tmp=0
    tabsstr=""
    while [ ${tmp} -lt $((ntab)) ]
    do
        tabsstr=${tabsstr}'\t'
        tmp=$((tmp+1))
    done
    echo -e -n ${tabsstr} >> ${file_xdmf}
}

function tag_start(){
    out_tabs
    put $*
    ntab=$((ntab+1))
}

function tag_end(){
    ntab=$((ntab-1))
    out_tabs
    put '/'$*
}

function tag(){
    out_tabs
    str=$*'/'
    put ${str}
}

function data(){
    out_tabs
    echo $* >> ${file_xdmf}
}

# Main

if [ -z "${file_mesh}" ]; then
    t_fmt=$(printf "%08d" ${tstart})
    file_mesh=${file_field}${t_fmt}'_'${fieldname[0]}'.h5'
fi

put '?xml version="1.0" ?'
put '!DOCTYPE Xdmf SYSTEM "Xdmf.dtd" []'
tag_start 'Xdmf Version="2.0"'
    tag_start 'Domain'
        tag 'Topology name="Topo" TopologyType="3DRectMesh" Dimensions="'${nz}' '${ny}' '${nx}'"'
        tag_start 'Geometry name="Geo" Type="VXVYVZ"'
            tag_start 'DataItem Dimensions="'${nx}'" NumberType="Float" Precision="'${fp}'" Format="HDF"'
                data ${file_mesh}':/xc'
            tag_end   'DataItem'
            tag_start 'DataItem Dimensions="'${ny}'" NumberType="Float" Precision="'${fp}'" Format="HDF"'
                data ${file_mesh}':/yc'
            tag_end   'DataItem'
            tag_start 'DataItem Dimensions="'${nz}'" NumberType="Float" Precision="'${fp}'" Format="HDF"'
                data ${file_mesh}':/zc'
            tag_end   'DataItem'
        tag_end   'Geometry'
        echo >> ${file_xdmf}
        tag_start 'Grid Name="TimeSeries" GridType="Collection" CollectionType="Temporal"'
            tag_start 'Time TimeType="HyperSlab"'
                tag_start 'DataItem Format="XML" NumberType="Float" Dimensions="3"'
                    data "${tstart} ${tstride} ${tcount}"
                tag_end   'DataItem'
            tag_end   'Time'

            for ((t=${tstart}; t<=${tend}; t=t+${tstride}))
            do
                t_fmt=$(printf "%08d" ${t})
                tag_start 'Grid Name="'${t_fmt}'" GridType="Uniform"'
                    tag 'Topology Reference="/Xdmf/Domain/Topology[1]"'
                    tag 'Geometry Reference="/Xdmf/Domain/Geometry[1]"'
                    for name in ${fieldname[@]}
                    do
                        tag_start 'Attribute Name="'${name}'" Center="Node"'
                            tag_start 'DataItem Dimensions="'${nz}' '${ny}' '${nx}'" NumberType="Float" Precision="'${fp}'" Format="HDF"'
                                data ${file_field}${t_fmt}'_'${name}'.h5:/'${name}''
                            tag_end   'DataItem'
                        tag_end   'Attribute'
                    done
                tag_end   'Grid'
            done
        tag_end   'Grid'
        echo >> ${file_xdmf}
    tag_end   'Domain'
tag_end   'Xdmf'