include(CMakeDependentOption)
option(USE_GPTL "Option for using GPTL" OFF)
message(STATUS "Build PowerLLEL using GPTL: " ${USE_GPTL})
option(USE_C "Option for using C Binding" ON)
message(STATUS "Build PowerLLEL using C Binding: " ${USE_C})
option(USE_OMP "Option for using OpenMP" OFF)
message(STATUS "Build PowerLLEL using OpenMP: " ${USE_OMP})
option(USE_PDD "Option for using PDD(Parallel Diagonal Dominant) Algorithm" OFF)
message(STATUS "Build PowerLLEL using PDD(Parallel Diagonal Dominant) Algorithm: " ${USE_PDD})
option(USE_MKL "Option for using MKL FFT" OFF)
message(STATUS "Build PowerLLEL using MKL FFT: " ${USE_MKL})
option(USE_NBHALO "Option for using non-blocking halo exchange" ON)
message(STATUS "Build PowerLLEL using non-blocking halo exchange: " ${USE_NBHALO})

file(GLOB _mods mod_*.f90)

list(FILTER _mods EXCLUDE REGEX ".*mod_fft_mkl\\.f90$")
if(USE_MKL)
    string(REPLACE "mod_fft.f90" "mod_fft_mkl.f90" _mods "${_mods}")
endif()

if(USE_C)
    set(src ${_mods} main.f90 decomp2d/decomp_2d.f90 decomp_2d_c.f90)
else()
    set(src ${_mods} main.f90 decomp2d/decomp_2d.f90)
endif()
if(USE_GPTL)
    list(APPEND src gptlf.f90)
endif()

add_executable(PowerLLEL ${src})
install(TARGETS PowerLLEL)
set_target_properties(PowerLLEL PROPERTIES OUTPUT_NAME "PowerLLEL${PowerLLEL_SUFFIX}")

set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -cpp")

if(CMAKE_COMPILER_IS_GNUCC)
    execute_process(COMMAND ${CMAKE_C_COMPILER} -dumpfullversion -dumpversion OUTPUT_VARIABLE GCC_VERSION)
    string(REGEX MATCHALL "[0-9]+" GCC_VERSION_COMPONENTS ${GCC_VERSION})
    list(GET GCC_VERSION_COMPONENTS 0 GCC_MAJOR)
    list(GET GCC_VERSION_COMPONENTS 1 GCC_MINOR)
    set(GCC_VERSION "${GCC_MAJOR}.${GCC_MINOR}")
    message(STATUS "GCC version=${GCC_VERSION}")

    if (GCC_VERSION VERSION_GREATER_EQUAL "10")
        set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -fallow-argument-mismatch")    
    endif()
endif()

find_package(MPI REQUIRED)
target_link_libraries(PowerLLEL ${MPI_Fortran_LIBRARIES})
target_include_directories(PowerLLEL PRIVATE ${MPI_C_INCLUDE_DIRS})

find_package(HDF5 COMPONENTS Fortran)
target_include_directories(PowerLLEL PUBLIC ${HDF5_INCLUDE_DIRS})
target_link_libraries(PowerLLEL ${HDF5_Fortran_LIBRARIES})

if(USE_OMP)
    find_package(OpenMP)
    target_include_directories(PowerLLEL PUBLIC ${OpenMP_Fortran_INCLUDE_DIRS})
    target_link_libraries(PowerLLEL ${OpenMP_Fortran_LIBRARIES})
    target_compile_options(PowerLLEL PUBLIC ${OpenMP_Fortran_FLAGS})
    target_link_options(PowerLLEL PUBLIC ${OpenMP_Fortran_FLAGS})
endif()

find_package(PkgConfig REQUIRED)

if(USE_MKL)
    target_compile_definitions(PowerLLEL PRIVATE -DUSE_MKL)
    target_link_libraries(PowerLLEL mkl_intel_lp64 mkl_sequential mkl_core)
else()
    pkg_check_modules(FFTW3 REQUIRED fftw3 IMPORTED_TARGET)
    target_link_directories(PowerLLEL PRIVATE ${FFTW3_LIBRARY_DIRS})
    target_link_libraries(PowerLLEL ${FFTW3_LIBRARIES})
    if(USE_OMP)
        target_link_libraries(PowerLLEL "-lfftw3_omp")
    endif()
endif()

if(USE_GPTL)
    pkg_search_module(GPTL REQUIRED gptl)
    target_link_directories(PowerLLEL PRIVATE ${GPTL_LIBRARY_DIRS})
    target_link_libraries(PowerLLEL ${GPTL_LIBRARIES})
    target_compile_definitions(PowerLLEL PRIVATE -DGPTL)
endif()

if(USE_C)
    add_subdirectory(src_c)
    target_compile_definitions(PowerLLEL PRIVATE -DUSE_C)
    target_link_libraries(PowerLLEL c_binding)
endif()

if(USE_PDD)
    target_compile_definitions(PowerLLEL PRIVATE -D_PDD)
endif()

target_compile_definitions(PowerLLEL PRIVATE -D_PRECALC_TRID_COEFF)

if(USE_NBHALO)
    target_compile_definitions(PowerLLEL PRIVATE -DNB_HALO)
endif()
